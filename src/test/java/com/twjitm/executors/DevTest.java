package com.twjitm.executors;import java.util.ArrayList;import java.util.List;/** * @author twjitm - [Created on 2018-09-21 14:52] */public class DevTest {    public static void main(String[] args) {        // System.out.println(compare("1.2.3a", "1.2.4b"));        testIsPrime(11);    }    /**     * 编程实现一个比较任意两个软件版本号大小的函数，如 1.2.3a 和 1.2.4b     * 比较，后者版本号更大，请考虑各种情况，不可以使用系统提供的比较函数。*     * @return     */    /**     * 编程实现一个比较任意两个软件版本号大小的函数，如 1.2.3a 和 1.2.4b     * 当opt1大于opt2时返回true，当opt1小鱼opt2时返回false     *     * @param opt1     * @param opt2     * @return     */    public static boolean compare(String opt1, String opt2) {        byte[] bytes1 = opt1.getBytes();        byte[] bytes2 = opt2.getBytes();        int top = 0;        while (top < bytes1.length && top < bytes2.length) {            if (bytes1[top] > bytes2[top]) {                return true;            } else if (bytes1[top] < bytes2[top]) {                return false;            }            top++;        }        if (bytes1.length > bytes2.length) {            return true;        }        if (bytes1.length < bytes2.length) {            return false;        }        return false;    }    /**     * 如果一个质数能被表示为三个不同的质数的和的形式，     * 那么我们称它为立方质数。现在给你一个数n，判断它是不是立方质数。     * 1,3,7=11     *     * @param n     * @return     */    public static boolean testIsPrime(int n) {        int temp = n;        //小于这个质数的所以质数        List<Integer> listPrime = new ArrayList<Integer>();        if (!isPrime(n)) {            return false;        }        while (temp > 1) {            if (isPrime(temp = temp - 1)) {                listPrime.add(temp);            }        }        listPrime.add(1);        //方法1：重集和里面找到三个数相加起来等于n就可以了呀(On^3)        //1,3,7        for (int i = 0; i < listPrime.size(); i++) {            for (int j = 1; j < listPrime.size(); j++) {                for (int k = 2; k < listPrime.size(); k++) {                    if (listPrime.get(i) + listPrime.get(j) + listPrime.get(k) == n) {                        System.out.println(listPrime.get(i) + "," + listPrime.get(j) + "," + listPrime.get(k));                        return true;                    }                }            }        }        //方法2：        return false;    }    public static boolean isPrime(int a) {        boolean flag = true;        if (a < 2) {// 素数不小于2            return false;        } else {            for (int i = 2; i <= Math.sqrt(a); i++) {                if (a % i == 0) {// 若能被整除，则说明不是素数，返回false                    flag = false;                    break;// 跳出循环                }            }        }        return flag;    }}